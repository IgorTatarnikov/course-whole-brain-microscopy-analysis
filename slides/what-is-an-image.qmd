## A deeper look

`File > Open Files(s)`, then navigate to `calcium imaging folder` and open `translation1_00001_ce.tif`

![](img/cells-napari.png){alt="A screenshot of a some fluorescent cells"}

## Pixels

::: {.notes}
This 2D image shows the nuclei of human cells undergoing mitosis. If we really 
zoom in up-close by scrolling, we can see that this image is actually made up of 
many small squares with different brightness values. These squares are the 
image's pixels (or 'picture elements') and are the individual units that make 
up all digital images.

If we hover over these pixels with the mouse cursor, we can see that each pixel 
has a specific value. Try hovering over pixels in dark and bright areas of the 
image and see how the value changes in the bottom left of the viewer:
:::

![](img/pixel-value.png){alt="A screenshot of Napari - with the mouse cursor 
hovering over a pixel and highlighting the corresponding pixel value"}


## Images are arrays of numbers {.smaller}

:::: {.columns}

::: {.column width=45%}
Open Napari's built-in console ![](
https://raw.githubusercontent.com/napari/napari/main/napari/resources/icons/console.svg
){alt="A screenshot of Napari's console button" height='30px'} and run:

``` {.python}
# Get the image data for the first layer in Napari
image = viewer.layers[0].data

# Print the image values and type
print(image)
print(type(image))
```
:::

::: {.column width=55%}
![](img/napari-console.png){alt="A screenshot of Napari's console"}
:::

::::

::: {.notes}
We've seen that images are made of individual units called pixels that have 
specific values - but how is an image really represented in the computer? Let's 
dig deeper into Napari's `Image` layers...

All of the information about the Napari viewer can be accessed through the 
console with a variable called `viewer`. A `viewer` has 1 to many layers, and
here we access the top (first) layer with `viewer.layers[0]`. Then, to access 
the actual image data stored in that layer, we retrieve it with `.data`:

You should see that a series of numbers are printed out that are stored in a 
Python data type called a `numpy.ndarray`. Fundamentally, this means that all 
images are really just arrays of numbers (one number per pixel). Arrays are just 
rectangular grids of numbers, much like a spreadsheet. Napari is reading those 
values and converting them into squares of particular colours for us to see in 
the viewer, but this is only to help us interpret the image contents - the 
numbers are the real underlying data.

In Napari this array is a `numpy.ndarray`. [NumPy](https://numpy.org/) is a 
popular python package that provides 'n-dimensional arrays' (or 'ndarray' for 
short). N-dimensional just means they can support any number of dimensions - 
for example, 2D (squares/rectangles of numbers), 3D (cubes/cuboids of numbers) 
and beyond (like time series, images with many channels etc. where we would 
have multiple rectangles or cuboids of data which provide further information 
all at the same location).
:::

## Image dimensions

:::: {.columns}

::: {.column width=45%}
We can find out the dimensions by running the following in Napari's console:
``` {.python}
image.shape
```
:::

::: {.column width=55%}
![](img/napari-console.png){alt="A screenshot of Napari's console"}
:::

::::


::: {.notes}
Let's return to our image and explore some of the key features of 
its image array. First, what size is it?

The array size (also known as its dimensions) is stored in the `.shape`. Three values are printed as this image is three dimensional (3D), for a 2D image there would be 2, for a 4D image there would be 4 and so on...
:::

## Image data type

:::: {.columns}

::: {.column width=45%}
The other key feature of an image array is its 'data type' - this controls which 
values can be stored inside of it.
``` {.python}

image.dtype.name
```
The data type consists of type and bit-depth.
:::

::: {.column width=55%}
![](img/napari-console.png){alt="A screenshot of Napari's console"}
:::

::::


::: {.notes}
For example, let's look at the data type for 
our image - this is stored in `.dtype`:

We see that the data type (or 'dtype' for short) is `uint16`. This is short for 
'unsigned integer 16-bit'. Let's break this down further into two parts - the 
type (unsigned integer) and the bit-depth (16-bit).
:::

## Type

The type determines what kind of values can be stored in the array, for example:

- Unsigned integer: positive whole numbers
- Signed integer: positive and negative whole numbers
- Float: positive and negative numbers with a decimal point e.g. 3.14

::: {.notes}
For our calcium image, 'unsigned integer' means that only positive whole numbers 
can be stored inside. You can see this by hovering over the pixels in the image 
again in Napari - the pixel value down in the bottom left is always a positive 
whole number.
:::

## Bit depth

The bit depth determines the range of values that can be stored e.g. only values 
between 0 and $2^{16}-1$. 

``` {.python}
print(image.min())
print(image.max())
```



## Common data types {.smaller}

NumPy supports a [very wide range of data types](
https://numpy.org/doc/stable/reference/arrays.scalars.html#sized-aliases), 
but there are a few that are most common for image data:

| NumPy datatype     | Full name                | Range of values
| :---------         | :--------------          | :--------------
| `uint8`            | Unsigned integer 8-bit   | 0...255
| `uint16`           | Unsigned integer 16-bit  | 0...65535
| `float32`          | Float 32-bit             | $-3.4 \times 10^{38}...+3.4 \times 10^{38}$
| `float64`          | Float 64-bit             | $-1.7 \times 10^{308}...+1.7  \times 10^{308}$

`uint8` and `uint16` are most common for images from light microscopes. 
`float32` and `float64` are common during image processing (as we will see in 
later episodes).

## Coordinate system {.smaller}

![](img/coordinate-system.png){alt="Diagram comparing a standard graph 
coordinate system (left) and the image coordinate system (right)" width=60%}
![](img/coordinates-on-image.png
){alt="A diagram showing how pixel coordinates change over a simple 4x4 image" width=30%}

* For 2d images, `y` is the first coordinate
* For 3d images, `z` is the first coordinate

::: {.notes}
We've seen that images are arrays of numbers with a specific shape (dimensions) 
and data type. How do we access specific values from this array? What coordinate 
system is Napari using?

As you move around, you should see that the lowest coordinate values are at the 
top left corner, with the first value increasing as you move down and the second 
value increasing as you move to the right. This is different to the standard 
coordinate systems you may be used to (for example, from making graphs):

Note that Napari lists coordinates as [y, x] or [rows, columns], so e.g. [1,3] 
would be the pixel in row 1 and column 3. Remember that these coordinates always 
start from 0 as you can see in the diagram:
:::


## Key points

- Digital images are made of pixels
- Digital images store these pixels as arrays of numbers
- Napari (and Python more widely) use NumPy arrays to store images - 
these have a `shape` and `dtype`
- Most images are 8-bit or 16-bit unsigned integer
- Images use a coordinate system with (0,0) at the top left, x increasing to 
the right, and y increasing down

